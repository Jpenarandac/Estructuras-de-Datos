/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biblies;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author Cesar Rincón
 */
public class Launcher extends javax.swing.JFrame {
    private static String URL="jdbc:mysql://localhost:3306/basehijueputa";
    private static String DRIVER= "com.mysql.jdbc.Driver";
    public static String TABLA="libroshptas";
    private static String USER ="root";
    private static String PASSWORD="";
    public static int cantidadTextos;
    private static Connection con;
    public static ListaEnlazada listacodigo;
    public static ListaEnlazada listatitulo;
    public static ListaEnlazada listaautor;
    public static arbolAVL Acodigo;
    public static arbolAVL Atitulo;
    public static arbolAVL Aautor;
    public static File CSV;
    public static boolean CHECKarboles,CHECKlistas,seUsoCSV;
    public static ResultSet rs;
    
    Interfaz menuBiblies;
    
    public static Cliente defaultCliente;
    
    public static Admin defaultAdmin;
        
      

    /**
     * Creates new form NewJFrame
     */
    public Launcher() {
        defaultCliente=new Cliente("Pregrado", 0, 1, "Default", "Client", "ExampleDefault@unal.edu.co", "1234");
        defaultAdmin=new Admin(4719301, "Default", "Admin", "NotchBoss99@gmail.com", "XContraseñaX");
        
        listacodigo=new ListaEnlazada();
        listatitulo=new ListaEnlazada();
        listaautor=new ListaEnlazada();
        cantidadTextos=500000;
        Acodigo= new arbolAVL("codigo");
        Acodigo.activarRepetidos();
        Atitulo= new arbolAVL("titulo");
        Atitulo.activarRepetidos();
        Aautor= new arbolAVL("autor");
        Aautor.activarRepetidos();
        
        
        
        
        initComponents();
        this.setLocationRelativeTo(null);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUrl = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTabla = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonCONECTAR = new javax.swing.JButton();
        jButtonCargarCSV = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        miniConsola = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtCantidadTextos = new javax.swing.JTextField();
        DESCARGAR = new javax.swing.JButton();
        CHECKArboles = new javax.swing.JCheckBox();
        CHECKListas = new javax.swing.JCheckBox();
        CLEAN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtUrl.setText("jdbc:mysql://localhost:3306/basehijueputa");

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BiblIES");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Conectese a una base de datos");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("URL");

        txtTabla.setText("libroshptas");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Tabla");

        jButtonCONECTAR.setText("CONECTAR");
        jButtonCONECTAR.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonCONECTAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCONECTARActionPerformed(evt);
            }
        });

        jButtonCargarCSV.setText("Cargar desde CSV");
        jButtonCargarCSV.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonCargarCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarCSVActionPerformed(evt);
            }
        });

        miniConsola.setColumns(3);
        miniConsola.setRows(5);
        miniConsola.setAutoscrolls(false);
        miniConsola.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(miniConsola);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("N° textos");

        txtCantidadTextos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCantidadTextos.setText("500000");

        DESCARGAR.setText("DESCARGAR DATOS");
        DESCARGAR.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DESCARGAR.setEnabled(false);
        DESCARGAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DESCARGARActionPerformed(evt);
            }
        });

        CHECKArboles.setText("Arboles AVL");

        CHECKListas.setText("Listas Enlazadas");

        CLEAN.setText("C");
        CLEAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEANActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(4, 4, 4)
                            .addComponent(CLEAN)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(5, 5, 5)
                                    .addComponent(txtCantidadTextos, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(34, 34, 34)
                                    .addComponent(jButtonCONECTAR, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addComponent(DESCARGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CHECKArboles)
                                .addComponent(CHECKListas)
                                .addComponent(jButtonCargarCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(txtTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidadTextos, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jButtonCONECTAR, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DESCARGAR, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CHECKArboles)
                        .addGap(10, 10, 10)
                        .addComponent(CHECKListas)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCargarCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CLEAN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCargarCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarCSVActionPerformed
        try {
            // TODO agregar funcion para cargar desde csv
           if(this.menuBiblies!=null)
               this.menuBiblies.setState(JFrame.EXIT_ON_CLOSE);
            lectorCSV lector = new lectorCSV();
            lector.cargarArchivo();
        } catch (Exception ex) {
            Logger.getLogger(Launcher.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }//GEN-LAST:event_jButtonCargarCSVActionPerformed

    private void jButtonCONECTARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCONECTARActionPerformed
        // TODO add your handling code here:
        Launcher.URL=this.txtUrl.getText().trim();
        
        this.miniConsola.setText(this.miniConsola.getText()+"\nConectando....\n");
        Connection temp;
        try {
            Class.forName(DRIVER);
            temp = (Connection) DriverManager.getConnection(Launcher.URL,Launcher.USER,Launcher.PASSWORD);
            Launcher.con=temp;
            
          } catch (ClassNotFoundException | SQLException e) {
              this.miniConsola.setText(this.miniConsola.getText() + "\nERROR: "+e+"\n");
              return;
        }
        
        this.miniConsola.setText(this.miniConsola.getText() + "\nConexion establecida");
        
        this.DESCARGAR.setEnabled(true);
    }//GEN-LAST:event_jButtonCONECTARActionPerformed

    private void DESCARGARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DESCARGARActionPerformed
        // TODO add your handling code here:
         if(this.menuBiblies!=null)
               this.menuBiblies.setState(JFrame.EXIT_ON_CLOSE);
         String S0=this.txtCantidadTextos.getText().trim();
         Launcher.TABLA=this.txtTabla.getText();
        if(!isNumber(S0) || S0.equals("")){
            this.miniConsola.setText(this.miniConsola.getText() + "\nIngrese un numero valido en N° Textos");
            return;
        }
        if(this.CHECKArboles.isSelected() || this.CHECKListas.isSelected()){
        Launcher.cantidadTextos=Integer.parseInt(S0);
        if(this.CHECKListas.isSelected()){
            this.miniConsola.setText(this.miniConsola.getText() + "\nInsertado en Listas\n");
            this.insertarLibrosSQL(defaultAdmin, listacodigo, listatitulo, listaautor);
        }
        if(this.CHECKArboles.isSelected()){
            this.miniConsola.setText(this.miniConsola.getText() + "\nInsertado en Arboles\n");
            this.insertarLibrosAVL(defaultAdmin, Acodigo, Atitulo, Aautor);
        }
       
        }else{
          this.miniConsola.setText(this.miniConsola.getText() + "\n\nSeleccione almenos una de las estructuras de datos\n");
          return;
        }
            
       this.miniConsola.setText(this.miniConsola.getText() + "\n\n\nABRIENDO BIBLIES...");
      minimizar();
      Launcher.seUsoCSV=false;
        Launcher.CHECKarboles=CHECKArboles.isSelected();
        Launcher.CHECKlistas=CHECKListas.isSelected();
        menuBiblies = new Interfaz();
        menuBiblies.setVisible(true);
        
        

    }//GEN-LAST:event_DESCARGARActionPerformed

    private void CLEANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEANActionPerformed
        // TODO add your handling code here:
        this.miniConsola.setText("");
    }//GEN-LAST:event_CLEANActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Launcher().setVisible(true);
            }
        });
        //TODO
        
        
           switch(medida){
            case "nanosegundos": div=1;
            break;
            case "milisegundos": div=1000000;
            break;
            case "centecimas": div=  10000000;
            break;
            case "segundos": div=    1000000000;
            break;
                
        }
        
           
        //TODO
        
    }




//=======================
    static long TInicio, TFin,div;
    static double total=1;
    
    //------------   1   --------- 1000.000 ------------- 10.000.000 -------------1.000.000.000 -------------
  // tiempo:  [nano]segundos // [mili]segundos  // [cen]tecimas de segundo // [s]egundos
  //---------------------------------------------------------------------------------------------------
  
      static String medida="milisegundos";
  
  static String timestamp(long i, long f){
      return "TIEMPO ["+medida+"] de operacion: "+ (f-i)/div +" "+medida;
  }
  //==========================
    
    static boolean isNumber(String n){
        return n.toLowerCase().equals(n.toUpperCase());
    }
  
  
  
  
  
    private void insertarLibrosSQL(Admin ad,ListaEnlazada listaCod,ListaEnlazada listaTitulo,ListaEnlazada listaAutor){
        listaCod.cabeza=null;
        listaCod.cola=null;
        listaCod.tamano=0;
        listaTitulo.cabeza=null;
        listaTitulo.cola=null;
        listaTitulo.tamano=0;
        listaAutor.cabeza=null;
        listaAutor.cola=null;
        listaAutor.tamano=0;
        this.miniConsola.setText(this.miniConsola.getText() + "\nInsertando en Listas...\n");
        System.out.println("SE ESTÁ INSERTANDO EN LISTAS!!!");
        long TInicio = System.nanoTime();
        long TINICIO = System.nanoTime();
        String SQL = "select * from " + Launcher.TABLA + " limit " + Launcher.cantidadTextos;
        int codigo, numeroPagina;
        String titulo, autor, publicacion, idioma, tema;
        try {
            Statement st = con.createStatement();
             rs = st.executeQuery(SQL);
            while (rs.next()) {
                codigo = rs.getInt(1);
                titulo = rs.getString(2);
                autor = rs.getString(3);
                publicacion = rs.getString(4);
                numeroPagina = rs.getInt(5);
                idioma = rs.getString(6);
                tema = rs.getString(7);

                Texto libro = new Texto(codigo, titulo, autor, publicacion, numeroPagina, idioma, tema);
                ad.crearLibro(libro, listaCod, listaTitulo, listaAutor);

                if (codigo % 10000 == 0) {
                     TFin = System.nanoTime();
                    System.out.println(codigo+" Textos ingresados, "+timestamp(TInicio, TFin)+"\n=======================\n");
                }
            }
        } catch (Exception e) {
            this.miniConsola.setText(this.miniConsola.getText() + "ERROR: " + e);
        }
        long TFIN = System.nanoTime();
        this.miniConsola.setText(this.miniConsola.getText() + "\nFIN: " + timestamp(TINICIO, TFIN)+"\n\n\ntamaño lcodigo: "+listaCod.tamano+"\nltitulo: "+listatitulo.tamano+""
                + "\nlautor: "+listaautor.tamano);
    }
    
     private void insertarLibrosAVL(Admin ad,arbolAVL acodigo,arbolAVL atitulo,arbolAVL aautor){
         acodigo.FORMATNodos();
         atitulo.FORMATNodos();
         aautor.FORMATNodos();
       long TInicio = System.nanoTime();
       long TFin;
       long TINICIO = System.nanoTime();
        String SQL="select * from "+ Launcher.TABLA+" limit "+Launcher.cantidadTextos;
        int codigo, numeroPagina;
        String titulo,autor,publicacion,idioma,tema;
        try {
            Statement st=con.createStatement();
             rs=st.executeQuery(SQL);
            while(rs.next()){
                 codigo=rs.getInt(1);
                 titulo=rs.getString(2);
                 autor=rs.getString(3);
                 publicacion=rs.getString(4);
                 numeroPagina=rs.getInt(5);
                 idioma=rs.getString(6);
                 tema=rs.getString(7);
                
                Texto libro = new Texto(codigo,titulo, autor, publicacion, numeroPagina, idioma, tema);
                ad.crearLibroAVL(libro, acodigo, atitulo, aautor);

                if (codigo%10000==0){
                    TFin = System.nanoTime();
                    System.out.println(codigo+" Textos ingresados, "+timestamp(TInicio, TFin)+"\n=======================\n");
                }
            }
        } catch (Exception e) {
            this.miniConsola.setText(this.miniConsola.getText() +"ERROR: "+e);
        }
        long TFIN =System.nanoTime();
        this.miniConsola.setText(this.miniConsola.getText() +"\nFIN: "+timestamp(TINICIO,TFIN));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CHECKArboles;
    private javax.swing.JCheckBox CHECKListas;
    private javax.swing.JButton CLEAN;
    private javax.swing.JButton DESCARGAR;
    private javax.swing.JButton jButtonCONECTAR;
    private javax.swing.JButton jButtonCargarCSV;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea miniConsola;
    private javax.swing.JTextField txtCantidadTextos;
    private javax.swing.JTextField txtTabla;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables

private  class lectorCSV{
    JFileChooser selectorArchivos;
   
    String path;

    public void cargarArchivo(){
        if(CHECKArboles.isSelected() || CHECKListas.isSelected()){
        this.selectorArchivos = new JFileChooser();
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int resultado = selectorArchivos.showOpenDialog(selectorArchivos);
        if(resultado==JFileChooser.CANCEL_OPTION)
            return;
        if((CSV = selectorArchivos.getSelectedFile().getAbsoluteFile())==null)// obtiene el archivo seleccionado
            return;
        miniConsola.setText(miniConsola.getText() +"\nValidando...");
        
        //ahora descartemos errores
       
       //try{
        if ((CSV != null) || resultado==JFileChooser.APPROVE_OPTION) { //si se eligió un archivo  
            //System.out.println("ARCHIVO NO NULL Y APROVE SELECTION");
            DESCARGAR.setEnabled(false);
            CSVaTextos(defaultAdmin,listacodigo,listatitulo,listaautor,Acodigo,Atitulo,Aautor );
        }
       //}catch(Exception e){
           //JOptionPane.showMessageDialog(null,"Eliga un archivo CSV valido", "NEL!",  JOptionPane.ERROR_MESSAGE);
          // miniConsola.setText(miniConsola.getText() +"\nERROR: "+e);
          // System.out.println(e);
           
      //}
        }else{
            miniConsola.setText(miniConsola.getText() + "\n\nSeleccione almenos una de las estructuras de datos\n");
        }
        
    }
    private void CSVaTextos(Admin ad,ListaEnlazada listaCod,ListaEnlazada listaTitulo,ListaEnlazada listaAutor,arbolAVL acodigo,arbolAVL atitulo,arbolAVL aautor){
        BufferedReader br;
        String fila;
        String[] row;
         int codigo, numeroPagina,counter=1;
        String titulo,autor,publicacion,idioma,tema;
        Texto txt;
        
           try {
             br= new BufferedReader(new FileReader(CSV.getAbsolutePath())); //getabsolutepath funciona
             fila =br.readLine(); //leemos la primera linea
             fila =br.readLine(); //leemos la segunda, la a primera era la de los nombres de columnas (titulo,autor,fecha,etc)
           row=fila.split(";");//separamos por columnas
           
             if(row.length==6){ //si tiene 6 columnas, no tiene la columna id, entonces...
                 //System.out.println("\n\nTIENE <7 COLUMNAS");
                 while((fila=br.readLine())!=null){
                 row=fila.split(";");
                 titulo=row[0];
                 autor=row[1];
                 publicacion=row[2];
                 numeroPagina=Integer.parseInt(row[3]);
                 //String paginas = row[3];
                 idioma=row[4];
                 tema=row[5];
                 //System.out.println("\n\ncodigo: "+counter+"\ntitulo: "+titulo+"\nautor: "+autor+"\nFecha: "+publicacion+"\npaginas: "+paginas+"\nidioma: "+idioma+"\ntema: "+tema);
                 
                 txt = new Texto(counter,titulo,autor,publicacion,numeroPagina,idioma,tema);
                     
                 if(CHECKArboles.isSelected())
                     ad.crearLibroAVL(txt, acodigo, atitulo, aautor);
                 if(CHECKListas.isSelected())
                     ad.crearLibro(txt, listacodigo, listaTitulo, listaAutor);
                 
                 if (counter%10000==0){
                    TFin = System.nanoTime();
                    System.out.println(counter+" Textos ingresados, "+timestamp(TInicio, TFin)+"\n=======================\n");
                }
                 
                 counter++;
               //  System.out.println(txt);
                 
                 }
                 
             }else if(row.length==7){
                 
                 while((fila=br.readLine())!=null){
                row=fila.split(";");
                 codigo=Integer.parseInt(row[0]);
                 titulo=row[1];
                 autor=row[2];
                 publicacion=row[3];
                 numeroPagina=Integer.parseInt(row[4]);
                 //String paginas = row[4];
                 idioma=row[5];
                 tema=row[6];
                 txt = new Texto(codigo,titulo,autor,publicacion,numeroPagina,idioma,tema);
                 
                 if(CHECKArboles.isSelected())
                     ad.crearLibroAVL(txt, acodigo, atitulo, aautor);
                 if(CHECKListas.isSelected())
                     ad.crearLibro(txt, listacodigo, listaTitulo, listaAutor);
                 
                 if (counter%10000==0){
                    TFin = System.nanoTime();
                    System.out.println(counter+" Textos ingresados, "+timestamp(TInicio, TFin)+"\n=======================\n");
                }
                 counter++;
                //System.out.println("\n\ncodigo: "+codigo+"\ntitulo: "+titulo+"\nautor: "+autor+"\nFecha: "+publicacion+"\npaginas: "+paginas+"\nidioma: "+idioma+"\ntema: "+tema);
                 }

             }
           
             
          
           
        } catch (FileNotFoundException ex) {
            miniConsola.setText(miniConsola.getText() +"\nERROR, no se encontró el archivo: "+ex+"\n");
            System.out.println(ex);
            return;
        }  catch (IOException ex) {
            miniConsola.setText(miniConsola.getText() +"\nERROR: "+ex+"\n");
            System.out.println(ex);
            return;
        }catch(java.lang.NumberFormatException e){
            miniConsola.setText(miniConsola.getText() +"\nHAY UN PROBLEMA CON TU ARCHIVO CSV, probablemente sea un caracter dentro de una columna de numeros o un separador (; o ,) incrustado de más\ne\n");
            return;
        }
        miniConsola.setText(miniConsola.getText() + "\n\n\nABRIENDO BIBLIES...");
       Launcher.seUsoCSV=false;
        Launcher.CHECKarboles=CHECKArboles.isSelected();
        Launcher.CHECKlistas=CHECKListas.isSelected();
        menuBiblies = new Interfaz();
        minimizar();
        menuBiblies.setVisible(true);
        
        
        
        
        
        
        }

    }


public static ResultSet ejecutarSentenciaSQL(String sentencia){
    Statement st;
    ResultSet rs;
        try {
            if(con==null || (st=con.createStatement())==null)
                return null;
            
            rs=st.executeQuery(sentencia);
        } catch (SQLException  ex) {
            rs=null;
        }
        return rs;
}



        private void minimizar() {
            this.setState(JFrame.ICONIFIED);
        }


}

